package com.example.android_exam.data.repository;

import static com.example.android_exam.App.getContext;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Handler;
import android.os.Looper;

import com.example.android_exam.data.api.ApiManager;
import com.example.android_exam.data.api.DataCallback;
import com.example.android_exam.data.dto.food.FoodIngredientDto;
import com.example.android_exam.data.dto.food.FoodSuggestionRequestDto;
import com.example.android_exam.data.dto.food.FoodSuggestionResponseDto;
import com.example.android_exam.data.dto.nutrition.NutritionTip;
import com.example.android_exam.data.dto.nutrition.OverviewNutritionSummaryDto;
import com.example.android_exam.data.dto.response.ApiResponse;
import com.example.android_exam.data.dto.user.UserInformationDto;
import com.example.android_exam.data.models.base.User;
import com.example.android_exam.data.models.enums.ActivityLevel;
import com.example.android_exam.data.models.enums.Gender;
import com.example.android_exam.data.models.enums.NutritionGoal;
import com.example.android_exam.utils.SessionManager;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.List;

public class HomeRepository {
    private static HomeRepository instance;
    private Handler handler = new Handler(Looper.getMainLooper());

    public static HomeRepository getInstance() {
        if (instance == null) {
            instance = new HomeRepository();
        }
        return instance;
    }

    private static final String CACHE_PREF_NAME = "FoodCache";
    private static final String CACHE_KEY = "Suggestions";

    private List<FoodSuggestionResponseDto> cachedSuggestions = null;

    public HomeRepository() {
        cachedSuggestions = loadCacheFromLocal();
    }

    // Simulate API call for nutrition tip
    public void getNutritionTip(DataCallback<ApiResponse<NutritionTip>> callback) {
        callback.onLoading(true);

        // Simulate network delay
        handler.postDelayed(() -> {
            try {
                // Mock data with various nutrition tips
                String[] tips = {
                        "U·ªëng ƒë·ªß n∆∞·ªõc l√† ch√¨a kh√≥a cho s·ª©c kh·ªèe t·ªët. M·ª•c ti√™u 8-10 ly n∆∞·ªõc m·ªói ng√†y.",
                        "Protein trong b·ªØa s√°ng gi√∫p b·∫°n c·∫£m th·∫•y no l√¢u h∆°n v√† duy tr√¨ nƒÉng l∆∞·ª£ng.",
                        "ƒÇn nhi·ªÅu rau xanh gi√∫p cung c·∫•p vitamin v√† kho√°ng ch·∫•t thi·∫øt y·∫øu.",
                        "H·∫°n ch·∫ø ƒë∆∞·ªùng v√† th·ª±c ph·∫©m ch·∫ø bi·∫øn s·∫µn ƒë·ªÉ c·∫£i thi·ªán s·ª©c kh·ªèe t·ªïng th·ªÉ.",
                        "ƒÇn ch·∫≠m v√† nhai k·ªπ gi√∫p ti√™u h√≥a t·ªët h∆°n v√† ki·ªÉm so√°t c√¢n n·∫∑ng."
                };

                String[] titles = {
                        "üíß M·∫πo hydration h√¥m nay",
                        "ü•ö Protein cho b·ªØa s√°ng",
                        "ü•¨ Rau xanh trong b·ªØa ƒÉn",
                        "üçé ƒÇn u·ªëng l√†nh m·∫°nh",
                        "üçΩÔ∏è Th√≥i quen ƒÉn u·ªëng"
                };

                int randomIndex = (int) (Math.random() * tips.length);

                NutritionTip tip = new NutritionTip();
                tip.setTitle(titles[randomIndex]);
                tip.setContent(tips[randomIndex]);
                tip.setType("nutrition");

                ApiResponse<NutritionTip> response = new ApiResponse<>();
                response.setSuccess(true);
                response.setData(tip);
                response.setMessage("Success");

                callback.onLoading(false);
                callback.onSuccess(response);
            } catch (Exception e) {
                callback.onLoading(false);
                callback.onError("Failed to load nutrition tip: " + e.getMessage());
            }
        }, 1000);
    }
    public void getFoodSuggestions(boolean forceFetch, DataCallback<ApiResponse<List<FoodSuggestionResponseDto>>> callback) {
        if (!forceFetch && cachedSuggestions != null && !cachedSuggestions.isEmpty()) {
            // Tr·∫£ v·ªÅ cache n·∫øu kh√¥ng force fetch
            var response = new ApiResponse<List<FoodSuggestionResponseDto>>();
            response.setSuccess(true);
            response.setData(cachedSuggestions);
            response.setMessage("Loaded from cache");
            callback.onLoading(false);
            // G·ªçi callback onSuccess v·ªõi d·ªØ li·ªáu cache
            callback.onSuccess(response);
            return;
        }

        // Load user info t·ª´ local
        SessionManager.getUser(new SessionManager.UserCallback() {
            @Override
            public void onUserLoaded(User user) {
                var foodSuggestionRequest = new FoodSuggestionRequestDto();
                foodSuggestionRequest.setUserInformation(user.toUserInformationDto());

                // Call API
                ApiManager.getInstance().getFoodClient().getFoodSuggestions(foodSuggestionRequest, new DataCallback<ApiResponse<List<FoodSuggestionResponseDto>>>() {
                    @Override
                    public void onLoading(boolean loading) {
                        callback.onLoading(loading);
                    }

                    @Override
                    public void onSuccess(ApiResponse<List<FoodSuggestionResponseDto>> response) {
                        if (response.isSuccess() && response.getData() != null) {
                            cachedSuggestions = response.getData(); // L∆∞u cache RAM
                            saveCacheToLocal(cachedSuggestions);    // L∆∞u cache local
                            callback.onSuccess(response);
                        } else {
                            callback.onError("Failed to load food suggestions: " + response.getMessage());
                        }
                    }

                    @Override
                    public void onError(String error) {
                        callback.onError("Failed to load food suggestions: " + error);
                    }

                    @Override
                    public void onFailure(Throwable throwable) {
                        callback.onError("Failed to load food suggestions: " + throwable);
                    }
                });
            }

            @Override
            public void onError(String error) {
                callback.onError("Failed to load user information: " + error);
            }
        });
    }

    private void saveCacheToLocal(List<FoodSuggestionResponseDto> suggestions) {
        String json = new Gson().toJson(suggestions);
        SharedPreferences preferences = getContext().getSharedPreferences(CACHE_PREF_NAME, Context.MODE_PRIVATE);
        preferences.edit().putString(CACHE_KEY, json).apply();
    }

    private List<FoodSuggestionResponseDto> loadCacheFromLocal() {
        SharedPreferences preferences = getContext().getSharedPreferences(CACHE_PREF_NAME, Context.MODE_PRIVATE);
        String json = preferences.getString(CACHE_KEY, null);
        if (json != null) {
            Type type = new TypeToken<List<FoodSuggestionResponseDto>>() {}.getType();
            return new Gson().fromJson(json, type);
        }
        return null;
    }

    // Helper method to create FoodIngredientDto
    private FoodIngredientDto createIngredient(String name, BigDecimal quantity) {
        FoodIngredientDto ingredient = new FoodIngredientDto();
        ingredient.setIngredientName(name);
        ingredient.setQuantity(quantity);
        return ingredient;
    }

    // Simulate API call for nutrition progress
    public void getNutritionOverview(DataCallback<ApiResponse<OverviewNutritionSummaryDto>> callback) {
        callback.onLoading(true);

        SessionManager.getUser(new SessionManager.UserCallback() {
            @Override
            public void onUserLoaded(User user) {
                UserInformationDto userInfo = new UserInformationDto();
                userInfo.setGender(user.getGender());
                userInfo.setDateOfBirth(user.getDateOfBirth());
                userInfo.setHeight(user.getHeight());
                userInfo.setWeight(user.getWeight());
                userInfo.setTargetWeight(user.getTargetWeight());
                userInfo.setPrimaryNutritionGoal(user.getPrimaryNutritionGoal());
                userInfo.setActivityLevel(user.getActivityLevel());
                ApiManager.getInstance().getNutritionClient().getOverviewNutritionSummary(userInfo, new DataCallback<ApiResponse<OverviewNutritionSummaryDto>>() {
                    @Override
                    public void onSuccess(ApiResponse<OverviewNutritionSummaryDto> result) {
                        if (result.isSuccess() && result.getData() != null) {
                            callback.onSuccess(result);
                        } else {
                            callback.onError(result.getMessage());
                        }
                        callback.onLoading(false);
                    }

                    @Override
                    public void onError(String error) {
                        callback.onLoading(false);
                        callback.onError(error);
                    }

                    @Override
                    public void onFailure(Throwable throwable) {
                        callback.onLoading(false);
                        callback.onFailure(throwable);
                    }
                });
            }

            @Override
            public void onError(String error) {
                // Handle error loading user information
                callback.onLoading(false);
                callback.onError("Failed to load user information: " + error);
                //Clear shared preferences if user info is not available
                //SharedPreferences preferences = getContext().getSharedPreferences(CACHE_PREF_NAME, Context.MODE_PRIVATE);
                //preferences.edit().clear().apply();
                //Switch to login screen or show error message
                return;
            }
        });



    }

    // Simulate API call for user profile
    public void getUserProfile(DataCallback<ApiResponse<UserInformationDto>> callback) {
        callback.onLoading(true);

        handler.postDelayed(() -> {
            try {
                UserInformationDto profile = new UserInformationDto();

                // Set user information
                profile.setGender(Gender.MALE);

                // Create date of birth (25 years old)
                Calendar calendar = Calendar.getInstance();
                calendar.set(1999, Calendar.MARCH, 15); // March 15, 1999
                profile.setDateOfBirth(calendar.getTime());

                profile.setHeight(170.5);
                profile.setWeight(68.5);
                profile.setTargetWeight(65.0);
                profile.setPrimaryNutritionGoal(NutritionGoal.WEIGHT_LOSS);
                profile.setActivityLevel(ActivityLevel.ACTIVE);

                ApiResponse<UserInformationDto> response = new ApiResponse<>();
                response.setSuccess(true);
                response.setData(profile);
                response.setMessage("Success");

                callback.onLoading(false);
                callback.onSuccess(response);
            } catch (Exception e) {
                callback.onLoading(false);
                callback.onError("Failed to load user profile: " + e.getMessage());
            }
        }, 600);
    }
}